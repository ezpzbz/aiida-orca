name: Build

on: [push, pull_request]

jobs:
  # openmpi:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Get OpenMPI from cache (or start caching)
  #     id: openmpi-cache
  #     uses: actions/cache@v1
  #     with:
  #       path: ./ompi216
  #       key: ompi216
  #   - name: download-openmpi
  #     if: steps.openmpi-cache.outputs.cache-hit != 'true'
  #     run: |
  #       export OPENMPI_DIR=${{ github.workspace }}/ompi216
  #       wget https://download.open-mpi.org/release/open-mpi/v2.1/openmpi-2.1.6.tar.gz
  #       tar -xvf openmpi-2.1.6.tar.gz
  #       cd openmpi-2.1.6
  #       ./configure --prefix=${OPENMPI_DIR}
  #       make -j
  #       make install
  tests:
    # needs: openmpi
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: [3.8,3.9]
        backend: ['django']
    
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: ''
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
    steps:
    - uses: actions/checkout@v2
    - name: Cache python dependencies
      id: cache-pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: pip-${{ matrix.python-version }}-tests-${{ hashFiles('**/setup.json') }}
        restore-keys: |
          pip-${{ matrix.python-version }}-tests
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install python dependencies
      run: |
        pip install --upgrade pip
        pip install -e .[test,pre-commit]
        reentry scan -r aiida
    - name: Run pre-commit
      run: |
        pre-commit install
        pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )
    # - name: Get ORCA
    #   run: |
    #     chmod +x .github/get_orca.sh
    #     .github/get_orca.sh ${{secrets.DB_TOKEN}} ${{secrets.ORCA_LINK}} ${{secrets.ORCA_PASSWORD}}
    #     tar -xvf orca.tar.xz
    #     mv orca_4_2_1_linux_x86-64_shared_openmpi216 orca421
    # - name: Get OpenMPI from cache (or start caching)
    #   id: openmpi-cache
    #   uses: actions/cache@v1
    #   with:
    #     path: ./ompi216
    #     key: ompi
    # - name: Run pytest
    #   run: |
    #     source /home/runner/work/aiida-orca/aiida-orca/.github/setup.sh
    #     pytest --cov-report=xml --cov=./aiida_orca
    # - name: Upload coverage to codecov
    #   uses: codecov/codecov-action@v1
    #   with:
    #     token: ${{secrets.CODECOV_TOKEN}}
    #     file: ./coverage.xml
    